/* Generated by the Nim Compiler v0.18.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI60540 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI61074 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI3604 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI60401 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI61430 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI60014 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI60012 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI60007 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI60005 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI60021 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI60019 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI62274 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI33402 = {size: 0,kind: 43,base: null,node: null,finalizer: null};
var NTI33602 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NNI33602 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a0", len: 0, typ: NTI33402, name: "a0", sons: null}, 
{kind: 1, offset: "a1", len: 0, typ: NTI33402, name: "a1", sons: null}]};
NTI33602.node = NNI33602;
var NNI60007 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "x", len: 0, typ: NTI124, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI124, name: "y", sons: null}]};
NTI60007.node = NNI60007;
NTI60005.base = NTI60007;
var NNI60014 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "vx", len: 0, typ: NTI124, name: "vx", sons: null}, 
{kind: 1, offset: "vy", len: 0, typ: NTI124, name: "vy", sons: null}]};
NTI60014.node = NNI60014;
NTI60012.base = NTI60014;
var NNI60021 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "pos1", len: 0, typ: NTI60005, name: "pos1", sons: null}, 
{kind: 1, offset: "pos2", len: 0, typ: NTI60005, name: "pos2", sons: null}, 
{kind: 1, offset: "v1", len: 0, typ: NTI60012, name: "v1", sons: null}, 
{kind: 1, offset: "v2", len: 0, typ: NTI60012, name: "v2", sons: null}]};
NTI60021.node = NNI60021;
NTI60019.base = NTI60021;
NTI62274.base = NTI60019;
NTI61430.base = NTI60012;
NTI3604.base = NTI104;
var NNI60401 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI124, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI3604, name: "Field1", sons: null}]};
NTI60401.node = NNI60401;
NTI61074.base = NTI60005;
NTI60540.base = NTI60005;

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_20217, src_20218, ti_20219) {
	var result_20629 = null;

		switch (ti_20219.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_20201(ti_20219))) {
			result_20629 = src_20218;
			}
			else {
				result_20629 = [src_20218[0], src_20218[1]];
			}
			
			break;
		case 19:
			      if (dest_20217 === null || dest_20217 === undefined) {
        dest_20217 = {};
      }
      else {
        for (var key in dest_20217) { delete dest_20217[key]; }
      }
      for (var key in src_20218) { dest_20217[key] = src_20218[key]; }
      result_20629 = dest_20217;
    
			break;
		case 18:
		case 17:
			if (!((ti_20219.base == null))) {
			result_20629 = nimCopy(dest_20217, src_20218, ti_20219.base);
			}
			else {
			if ((ti_20219.kind == 17)) {
			result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {m_type: ti_20219} : dest_20217;
			}
			else {
				result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {} : dest_20217;
			}
			}
			nimCopyAux(result_20629, src_20218, ti_20219.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_20218 === null) {
        result_20629 = null;
      }
      else {
        if (dest_20217 === null || dest_20217 === undefined) {
          dest_20217 = new Array(src_20218.length);
        }
        else {
          dest_20217.length = src_20218.length;
        }
        result_20629 = dest_20217;
        for (var i = 0; i < src_20218.length; ++i) {
          result_20629[i] = nimCopy(result_20629[i], src_20218[i], ti_20219.base);
        }
      }
    
			break;
		case 28:
			      if (src_20218 !== null) {
        result_20629 = src_20218.slice(0);
      }
    
			break;
		default: 
			result_20629 = src_20218;
			break;
		}

	return result_20629;

}

function nimMin(a_19839, b_19840) {
		var Tmp1;

	var result_19841 = 0;

	BeforeRet: do {
		if ((a_19839 <= b_19840)) {
		Tmp1 = a_19839;
		}
		else {
		Tmp1 = b_19840;
		}
		
		result_19841 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_19841;

}
						var VELOCITY_61427 = nimCopy(null, [{vx: 2.0000000000000000e+000, vy: 0.0}, {vx: 1.8793852415718169e+000, vy: 6.8404028665133743e-001}, {vx: 1.5320888862379560e+000, vy: 1.2855752193730785e+000}, {vx: 1.0000000000000002e+000, vy: 1.7320508075688772e+000}, {vx: 3.4729635533386083e-001, vy: 1.9696155060244160e+000}, {vx: -3.4729635533386061e-001, vy: 1.9696155060244160e+000}, {vx: -9.9999999999999956e-001, vy: 1.7320508075688774e+000}, {vx: -1.5320888862379558e+000, vy: 1.2855752193730789e+000}, {vx: -1.8793852415718166e+000, vy: 6.8404028665133776e-001}, {vx: -2.0000000000000000e+000, vy: 2.4492127076447545e-016}, {vx: -1.8793852415718169e+000, vy: -6.8404028665133731e-001}, {vx: -1.5320888862379560e+000, vy: -1.2855752193730785e+000}, {vx: -1.0000000000000009e+000, vy: -1.7320508075688767e+000}, {vx: -3.4729635533386066e-001, vy: -1.9696155060244160e+000}, {vx: 3.4729635533385994e-001, vy: -1.9696155060244163e+000}, {vx: 1.0000000000000002e+000, vy: -1.7320508075688772e+000}, {vx: 1.5320888862379556e+000, vy: -1.2855752193730792e+000}, {vx: 1.8793852415718169e+000, vy: -6.8404028665133720e-001}], NTI61430);
var nimvm_6539 = false;
var nim_program_result = 0;
var globalRaiseHook_12005 = [null];
var localRaiseHook_12010 = [null];
var outOfMemHook_12013 = [null];
var state_33605 = [{a0: 1773455756, a1: 4275166512}];

function getTime_51433() {
	var result_55003 = 0;

		result_55003 = Math.trunc(new Date().getTime() / 1000);

	return result_55003;

}
var startMilsecs_55405 = [getTime_51433()];
var count_60002 = [0];

function slash__22207(x_22209, y_22210) {
	var result_22211 = 0.0;

		result_22211 = (x_22209 / y_22210);

	return result_22211;

}

function epochTime_55006() {
	var result_55008 = 0.0;

		result_55008 = slash__22207(new Date().getTime(), 1000);

	return result_55008;

}

function rotl_33802(x_33804, k_33805) {
	var result_33806 = 0;

		result_33806 = ((x_33804 << k_33805) | ((x_33804 >>> 0) >>> ((64 - k_33805) >>> 0)));

	return result_33806;

}

function next_33842(r_33845) {
	var result_33846 = 0;

		var s0_33847 = r_33845.a0;
		var s1_33848 = r_33845.a1;
		result_33846 = ((s0_33847 + s1_33848) >>> 0);
		s1_33848 = (s1_33848 ^ s0_33847);
		r_33845.a0 = ((rotl_33802(s0_33847, 55) ^ s1_33848) ^ (s1_33848 << 14));
		r_33845.a1 = rotl_33802(s1_33848, 36);

	return result_33846;

}

function initRand_34465(seed_34467) {
	var result_34468 = [{a0: 0, a1: 0}];

		result_34468[0].a0 = ((seed_34467 ) >>> 16);
		result_34468[0].a1 = (seed_34467 & 65535);
		next_33842(result_34468[0]);

	return result_34468[0];

}

function isFatPointer_20201(ti_20203) {
	var result_20204 = false;

	BeforeRet: do {
		result_20204 = !((ConstSet1[ti_20203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_20204;

}

function nimCopyAux(dest_20222, src_20223, n_20225) {
		switch (n_20225.kind) {
		case 0:
			break;
		case 1:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
    
			break;
		case 2:
			L1: do {
				var i_20615 = 0;
				var colontmp__20617 = 0;
				colontmp__20617 = (n_20225.len - 1);
				var res_20620 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20620 <= colontmp__20617)) break L3;
							i_20615 = res_20620;
							nimCopyAux(dest_20222, src_20223, n_20225.sons[i_20615]);
							res_20620 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
      for (var i = 0; i < n_20225.sons.length; ++i) {
        nimCopyAux(dest_20222, src_20223, n_20225.sons[i][1]);
      }
    
			break;
		}

	
}

function randomize_34479(seed_34481) {
		nimCopy(state_33605[0], initRand_34465(seed_34481), NTI33602);

	
}

function randomize_56001() {
		var time_56005 = (epochTime_55006() * 1.0000000000000000e+009);
		randomize_34479(time_56005);

	
}

function getContext2D_59513(c_59515) {
	var result_59516 = null;

		result_59516=c_59515.getContext('2d');

	return result_59516;

}

function seqToPtr_62009(x_62014) {
		return x_62014

	
}

function eqeq__61779(x_61784, y_61787) {
	var result_61788 = false;

	BeforeRet: do {
		if ((seqToPtr_62009(x_61784) == seqToPtr_62009(y_61787))) {
		result_61788 = true;
		break BeforeRet;
		}
		
		if (((x_61784 === null) || (y_61787 === null))) {
		result_61788 = false;
		break BeforeRet;
		}
		
		if (!(((x_61784 != null ? x_61784.length : 0) == (y_61787 != null ? y_61787.length : 0)))) {
		result_61788 = false;
		break BeforeRet;
		}
		
		L1: do {
			var i_62244 = 0;
			var colontmp__62256 = 0;
			colontmp__62256 = ((x_61784 != null ? x_61784.length : 0) - 1);
			var res_62259 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_62259 <= colontmp__62256)) break L3;
						i_62244 = res_62259;
						if (!((x_61784[i_62244] == y_61787[i_62244]))) {
						result_61788 = false;
						break BeforeRet;
						}
						
						res_62259 += 1;
					}
			} while(false);
		} while(false);
		result_61788 = true;
		break BeforeRet;
	} while (false);

	return result_61788;

}

function safeAdd_61768(x_61774, x_61774_Idx, y_61776) {
		if (eqeq__61779(x_61774[x_61774_Idx], null)) {
		x_61774[x_61774_Idx] = nimCopy(null, [y_61776], NTI62274);
		}
		else {
		if (x_61774[x_61774_Idx] != null) { x_61774[x_61774_Idx].push(y_61776); } else { x_61774[x_61774_Idx] = [y_61776]; };
		}
		

	
}

function degToRad_61432(d_61436) {
	var result_61437 = 0.0;

		result_61437 = (d_61436 * 1.7453292519943295e-002);

	return result_61437;

}

function fillStyleeq__59089(ctx_59091, color_59092) {
		ctx_59091.fillStyle=color_59092;

	
}

function cls_61411(canvas_61413, ctx_61414, color_61415) {
		fillStyleeq__59089(ctx_61414, color_61415);
		ctx_61414.fillRect(0.0, 0.0, canvas_61413.width, canvas_61413.height);

	
}

function change_61109(v_61112, v_61112_Idx, vNew_61113) {
		v_61112[v_61112_Idx].vx = vNew_61113.vx;
		v_61112[v_61112_Idx].vy = vNew_61113.vy;

	
}

function stareq__47542(x_47547, x_47547_Idx, y_47549) {
		x_47547[x_47547_Idx] = (x_47547[x_47547_Idx] * y_47549);

	
}

function roof__60032(x_60036, y_60038) {
	var result_60039 = [0.0];

		var colontmp__62314 = {Field0: 0.0, Field1: 0};
		var x_60402 = [0.0];
		var y_60403 = 0;
		nimCopy(colontmp__62314, {Field0: x_60036, Field1: y_60038}, NTI60401);
		x_60402[0] = colontmp__62314["Field0"];
		y_60403 = colontmp__62314["Field1"];
		result_60039[0] = 1.0000000000000000e+000;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					if (!(((y_60403 & 1) == 0))) {
					stareq__47542(result_60039, 0, x_60402[0]);
					}
					
					y_60403 = ((y_60403 >>> 0) >>> 1);
					if ((y_60403 == 0)) {
					break L1;
					}
					
					stareq__47542(x_60402, 0, x_60402[0]);
				}
		} while(false);

	return result_60039[0];

}

function distance_60027(hermiteCurve_60029) {
	var result_60030 = 0.0;

	BeforeRet: do {
		result_60030 = Math.sqrt((roof__60032((hermiteCurve_60029.pos2.x - hermiteCurve_60029.pos1.x), 2) + roof__60032((hermiteCurve_60029.pos2.y - hermiteCurve_60029.pos1.y), 2)));
		break BeforeRet;
	} while (false);

	return result_60030;

}

function getPoint_60442(pos1_60444, pos2_60445, v1_60446, v2_60447, t_60448) {
	var result_60449 = null;

	BeforeRet: do {
		var pt_60522 = {x: ((((((((2.0000000000000000e+000 * pos1_60444.x) - (2.0000000000000000e+000 * pos2_60445.x)) + v1_60446.vx) + v2_60447.vx) * roof__60032(t_60448, 3)) + (((((-3.0000000000000000e+000 * pos1_60444.x) + (3.0000000000000000e+000 * pos2_60445.x)) - (2.0000000000000000e+000 * v1_60446.vx)) - v2_60447.vx) * roof__60032(t_60448, 2))) + (v1_60446.vx * t_60448)) + pos1_60444.x), y: ((((((((2.0000000000000000e+000 * pos1_60444.y) - (2.0000000000000000e+000 * pos2_60445.y)) + v1_60446.vy) + v2_60447.vy) * roof__60032(t_60448, 3)) + (((((-3.0000000000000000e+000 * pos1_60444.y) + (3.0000000000000000e+000 * pos2_60445.y)) - (2.0000000000000000e+000 * v1_60446.vy)) - v2_60447.vy) * roof__60032(t_60448, 2))) + (v1_60446.vy * t_60448)) + pos1_60444.y)};
		result_60449 = pt_60522;
		break BeforeRet;
	} while (false);

	return result_60449;

}

function seqToPtr_60809(x_60814) {
		return x_60814

	
}

function eqeq__60566(x_60571, y_60574) {
	var result_60575 = false;

	BeforeRet: do {
		if ((seqToPtr_60809(x_60571) == seqToPtr_60809(y_60574))) {
		result_60575 = true;
		break BeforeRet;
		}
		
		if (((x_60571 === null) || (y_60574 === null))) {
		result_60575 = false;
		break BeforeRet;
		}
		
		if (!(((x_60571 != null ? x_60571.length : 0) == (y_60574 != null ? y_60574.length : 0)))) {
		result_60575 = false;
		break BeforeRet;
		}
		
		L1: do {
			var i_61044 = 0;
			var colontmp__61056 = 0;
			colontmp__61056 = ((x_60571 != null ? x_60571.length : 0) - 1);
			var res_61059 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_61059 <= colontmp__61056)) break L3;
						i_61044 = res_61059;
						if (!((x_60571[i_61044] == y_60574[i_61044]))) {
						result_60575 = false;
						break BeforeRet;
						}
						
						res_61059 += 1;
					}
			} while(false);
		} while(false);
		result_60575 = true;
		break BeforeRet;
	} while (false);

	return result_60575;

}

function safeAdd_60555(x_60561, x_60561_Idx, y_60563) {
		if (eqeq__60566(x_60561[x_60561_Idx], null)) {
		x_60561[x_60561_Idx] = nimCopy(null, [y_60563], NTI61074);
		}
		else {
		if (x_60561[x_60561_Idx] != null) { x_60561[x_60561_Idx].push(y_60563); } else { x_60561[x_60561_Idx] = [y_60563]; };
		}
		

	
}

function getPoints_60534(hermiteCurve_60536) {
	var result_60538 = null;

	BeforeRet: do {
		var points_60541 = [null];
		var divide_60542 = Math.trunc((distance_60027(hermiteCurve_60536) / 1.0000000000000000e-002));
		L1: do {
			var index_60551 = 0;
			var res_61093 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_61093 <= divide_60542)) break L3;
						index_60551 = res_61093;
						var t_60552 = (index_60551 / divide_60542);
						var pt_60553 = getPoint_60442(hermiteCurve_60536.pos1, hermiteCurve_60536.pos2, hermiteCurve_60536.v1, hermiteCurve_60536.v2, t_60552);
						safeAdd_60555(points_60541, 0, pt_60553);
						res_61093 += 1;
					}
			} while(false);
		} while(false);
		result_60538 = nimCopy(null, points_60541[0], NTI60540);
		break BeforeRet;
	} while (false);

	return result_60538;

}

function strokeStyleeq__59101(ctx_59103, color_59104) {
		ctx_59103.strokeStyle=color_59104;

	
}

function draw_61170(canvas_61172, ctx_61173, points_61175, lineWidth_61176, color_61177) {
		var width_61178 = canvas_61172.width;
		var height_61179 = canvas_61172.height;
		strokeStyleeq__59101(ctx_61173, color_61177);
		ctx_61173.lineWidth = lineWidth_61176;
		ctx_61173.beginPath();
		ctx_61173.moveTo((points_61175[0].x * width_61178), (points_61175[0].y * height_61179));
		L1: do {
			var point_61402 = null;
			var i_61408 = 0;
			var L_61410 = (points_61175 != null ? points_61175.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_61408 < L_61410)) break L3;
						point_61402 = points_61175[i_61408];
						ctx_61173.lineTo((point_61402.x * width_61178), (point_61402.y * height_61179));
						i_61408 += 1;
					}
			} while(false);
		} while(false);
		ctx_61173.stroke();

	
}

function loop_61416(canvas_61418, ctx_61419, hermiteCurves_61422, hermiteCurves_61422_Idx) {
		if ((18 <= count_60002[0])) {
		count_60002[0] = 0;
		}
		
		cls_61411(canvas_61418, ctx_61419, "#302833");
		L1: do {
			var index_61688 = 0;
			var hermiteCurve_61689 = null;
			var colontmp__61705 = null;
			colontmp__61705 = hermiteCurves_61422[hermiteCurves_61422_Idx];
			var i_61708 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_61708 < (colontmp__61705 != null ? colontmp__61705.length : 0))) break L3;
						index_61688 = i_61708;
						hermiteCurve_61689 = colontmp__61705[i_61708];
						change_61109(hermiteCurve_61689, "v1", VELOCITY_61427[Math.trunc((count_60002[0] + index_61688) % 18)]);
						change_61109(hermiteCurve_61689, "v2", VELOCITY_61427[Math.trunc(((count_60002[0] + index_61688) + 2) % 18)]);
						var points_61693 = getPoints_60534(hermiteCurve_61689);
						draw_61170(canvas_61418, ctx_61419, points_61693, 1.0000000000000000e+000, "#FBFAF5");
						i_61708 += 1;
					}
			} while(false);
		} while(false);
		count_60002[0] += 1;

	
}

function resize_61709(canvas_61711, maxwidth_61712) {
		canvas_61711.width = nimMin(maxwidth_61712, window.innerWidth);
		canvas_61711.height = nimMin(maxwidth_61712, window.innerWidth);

	
}

function main_61713() {

		function colonanonymous__62287() {
				loop_61416(canvas_61728, ctx_61729, hermiteCurves_61731, 0);

			
		}

		function colonanonymous__62291(e_62293) {
				resize_61709(canvas_61728, 600);

			
		}

		document.getElementById("lines").innerHTML = "N = 30";
		randomize_56001();
		var width_61726 = nimMin(600, window.innerWidth);
		var height_61727 = nimMin(600, window.innerWidth);
		var canvas_61728 = document.getElementById("hermite");
		var ctx_61729 = getContext2D_59513(canvas_61728);
		canvas_61728.width = width_61726;
		canvas_61728.height = height_61727;
		canvas_61728.style.backgroundColor = "#302833";
		var hermiteCurves_61731 = [null];
		L1: do {
			var index_61740 = 0;
			var i_62310 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_62310 < 30)) break L3;
						index_61740 = i_62310;
						safeAdd_61768(hermiteCurves_61731, 0, {pos1: {x: ((-2.5000000000000000e-001 * Math.cos(degToRad_61432((1.2000000000000000e+001 * index_61740)))) + 5.0000000000000000e-001), y: ((-2.5000000000000000e-001 * Math.sin(degToRad_61432((1.2000000000000000e+001 * index_61740)))) + 5.0000000000000000e-001)}, pos2: {x: ((2.5000000000000000e-001 * Math.cos(degToRad_61432((1.2000000000000000e+001 * index_61740)))) + 5.0000000000000000e-001), y: ((2.5000000000000000e-001 * Math.sin(degToRad_61432((1.2000000000000000e+001 * index_61740)))) + 5.0000000000000000e-001)}, v1: {vx: 0.0, vy: 0.0}, v2: {vx: 0.0, vy: 0.0}});
						i_62310 += 1;
					}
			} while(false);
		} while(false);
		var timer_62290 = window.setInterval(colonanonymous__62287, 16);
		window.addEventListener("resize", colonanonymous__62291, false);

	
}
if (true) {
main_61713();
}

