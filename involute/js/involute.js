/* Generated by the Nim Compiler v0.17.2 */
/*   (c) 2017 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI58576 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI58574 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI57643 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI57722 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI58440 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI57663 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI58283 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI3404 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI57401 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI42021 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI59599 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI59617 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NNI42021 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "x", len: 0, typ: NTI124, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI124, name: "y", sons: null}]};
NTI42021.node = NNI42021;
NTI59599.base = NTI42021;
NTI59617.base = NTI59599;
NTI3404.base = NTI104;
var NNI57401 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI124, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI3404, name: "Field1", sons: null}]};
NTI57401.node = NNI57401;
NTI58283.base = NTI42021;
NTI57663.base = NTI42021;
NTI58440.base = NTI42021;
NTI57722.base = NTI42021;
NTI57643.base = NTI42021;
NTI58574.base = NTI42021;
NTI58576.base = NTI42021;

function nimMin(a_19439, b_19440) {
		var Tmp1;

	var result_19441 = 0;

	BeforeRet: do {
		if ((a_19439 <= b_19440)) {
		Tmp1 = a_19439;
		}
		else {
		Tmp1 = b_19440;
		}
		
		result_19441 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_19441;

}

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_19817, src_19818, ti_19819) {
	var result_20229 = null;

		switch (ti_19819.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_19801(ti_19819))) {
			result_20229 = src_19818;
			}
			else {
				result_20229 = [src_19818[0], src_19818[1]];
			}
			
			break;
		case 19:
			      if (dest_19817 === null || dest_19817 === undefined) {
        dest_19817 = {};
      }
      else {
        for (var key in dest_19817) { delete dest_19817[key]; }
      }
      for (var key in src_19818) { dest_19817[key] = src_19818[key]; }
      result_20229 = dest_19817;
    
			break;
		case 18:
		case 17:
			if (!((ti_19819.base == null))) {
			result_20229 = nimCopy(dest_19817, src_19818, ti_19819.base);
			}
			else {
			if ((ti_19819.kind == 17)) {
			result_20229 = (dest_19817 === null || dest_19817 === undefined) ? {m_type: ti_19819} : dest_19817;
			}
			else {
				result_20229 = (dest_19817 === null || dest_19817 === undefined) ? {} : dest_19817;
			}
			}
			nimCopyAux(result_20229, src_19818, ti_19819.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_19818 === null) {
        result_20229 = null;
      }
      else {
        if (dest_19817 === null || dest_19817 === undefined) {
          dest_19817 = new Array(src_19818.length);
        }
        else {
          dest_19817.length = src_19818.length;
        }
        result_20229 = dest_19817;
        for (var i = 0; i < src_19818.length; ++i) {
          result_20229[i] = nimCopy(result_20229[i], src_19818[i], ti_19819.base);
        }
      }
    
			break;
		case 28:
			      if (src_19818 !== null) {
        result_20229 = src_19818.slice(0);
      }
    
			break;
		default: 
			result_20229 = src_19818;
			break;
		}

	return result_20229;

}

function makeNimstrLit(c_14603) {
		    var ln = c_14603.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_14603.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function toJSStr(s_15003) {
		    var len = s_15003.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15003[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15003[i] < 128)
        asciiPart[i] = fcc(s_15003[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function cstrToNimstr(c_14803) {
		  var ln = c_14803.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_14803.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_14803.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}
var nimvm_6119 = false;
var nim_program_result = 0;
var globalRaiseHook_11605 = [null];
var localRaiseHook_11610 = [null];
var outOfMemHook_11613 = [null];
var IDMATRIX_42056 = matrix2d_42040(1.0000000000000000e+000, 0.0, 0.0, 1.0000000000000000e+000, 0.0, 0.0);
var ORIGO_42057 = point2d_42052(0.0, 0.0);
var XAXIS_42058 = vector2d_42048(1.0000000000000000e+000, 0.0);
var YAXIS_42059 = vector2d_42048(0.0, 1.0000000000000000e+000);
var state_47605 = [{a0: 1773455756, a1: 4275166512}];

function getTime_50042() {
	var result_52413 = 0.0;

	BeforeRet: do {
		result_52413 = new Date();
		break BeforeRet;
	} while (false);

	return result_52413;

}
var startMilsecs_52512 = [getTime_50042()];

function rotl_47802(x_47804, k_47805) {
	var result_47806 = 0;

		result_47806 = ((x_47804 << k_47805) | ((x_47804 >>> 0) >>> ((64 - k_47805) >>> 0)));

	return result_47806;

}

function next_47842(s_47845) {
	var result_47846 = 0;

		var s0_47847 = s_47845.a0;
		var s1_47848 = s_47845.a1;
		result_47846 = ((s0_47847 + s1_47848) >>> 0);
		s1_47848 = (s1_47848 ^ s0_47847);
		s_47845.a0 = ((rotl_47802(s0_47847, 55) ^ s1_47848) ^ (s1_47848 << 14));
		s_47845.a1 = rotl_47802(s1_47848, 36);

	return result_47846;

}

function randomize_48434(seed_48436) {
		state_47605[0].a0 = ((seed_48436 ) >>> 16);
		state_47605[0].a1 = (seed_48436 & 65535);
		next_47842(state_47605[0]);

	
}

function randomize_53001() {
		randomize_48434(getTime_50042().getTime());

	
}

function random_48277(max_48279) {
	var result_48280 = 0;

	BeforeRet: do {
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					var x_48282 = next_47842(state_47605[0]);
					if ((x_48282 < ((4294967295 - (4294967295 % max_48279)) >>> 0))) {
					result_48280 = ((x_48282 % max_48279)|0);
					break BeforeRet;
					}
					
				}
		} while(false);
	} while (false);

	return result_48280;

}

function random_59761(x_59766) {
	var result_59767 = 0;

		result_59767 = (random_48277((x_59766.b - x_59766.a)) + x_59766.a);

	return result_59767;

}

function dotdot__37462(a_37466, b_37468) {
	var result_37470 = {a: 0, b: 0};

		result_37470.a = a_37466;
		result_37470.b = b_37468;

	return result_37470;

}

function newSeq_59612(len_59616) {
	var result_59618 = null;

		result_59618 = new Array(len_59616); for (var i=0;i<len_59616;++i) {result_59618[i]=null;}
	return result_59618;

}

function isFatPointer_19801(ti_19803) {
	var result_19804 = false;

	BeforeRet: do {
		result_19804 = !((ConstSet1[ti_19803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_19804;

}

function nimCopyAux(dest_19822, src_19823, n_19825) {
		switch (n_19825.kind) {
		case 0:
			break;
		case 1:
			      dest_19822[n_19825.offset] = nimCopy(dest_19822[n_19825.offset], src_19823[n_19825.offset], n_19825.typ);
    
			break;
		case 2:
			L1: do {
				var i_20215 = 0;
				var colontmp__20217 = 0;
				colontmp__20217 = (n_19825.len - 1);
				var res_20220 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20220 <= colontmp__20217)) break L3;
							i_20215 = res_20220;
							nimCopyAux(dest_19822, src_19823, n_19825.sons[i_20215]);
							res_20220 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_19822[n_19825.offset] = nimCopy(dest_19822[n_19825.offset], src_19823[n_19825.offset], n_19825.typ);
      for (var i = 0; i < n_19825.sons.length; ++i) {
        nimCopyAux(dest_19822, src_19823, n_19825.sons[i][1]);
      }
    
			break;
		}

	
}

function getd_57039(gear_57041) {
	var result_57042 = 0.0;

	BeforeRet: do {
		result_57042 = (gear_57041.m * gear_57041.z);
		break BeforeRet;
	} while (false);

	return result_57042;

}

function getda_57047(gear_57049) {
	var result_57050 = 0.0;

	BeforeRet: do {
		result_57050 = (getd_57039(gear_57049) + (2.0000000000000000e+000 * gear_57049.m));
		break BeforeRet;
	} while (false);

	return result_57050;

}

function getdb_57043(gear_57045) {
	var result_57046 = 0.0;

	BeforeRet: do {
		result_57046 = (getd_57039(gear_57045) * Math.cos(gear_57045.alpha));
		break BeforeRet;
	} while (false);

	return result_57046;

}

function getdf_57051(gear_57053) {
	var result_57054 = 0.0;

	BeforeRet: do {
		result_57054 = (getd_57039(gear_57053) - (2.5000000000000000e+000 * gear_57053.m));
		break BeforeRet;
	} while (false);

	return result_57054;

}

function stareq__40735(x_40740, x_40740_Idx, y_40742) {
		x_40740[x_40740_Idx] = (x_40740[x_40740_Idx] * y_40742);

	
}

function roof__57072(x_57076, y_57078) {
	var result_57079 = [0.0];

		var colontmp__59800 = {Field0: 0.0, Field1: 0};
		var x_57402 = [0.0];
		var y_57403 = 0;
		nimCopy(colontmp__59800, {Field0: x_57076, Field1: y_57078}, NTI57401);
		x_57402[0] = colontmp__59800["Field0"];
		y_57403 = colontmp__59800["Field1"];
		result_57079[0] = 1.0000000000000000e+000;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					if (!(((y_57403 & 1) == 0))) {
					stareq__40735(result_57079, 0, x_57402[0]);
					}
					
					y_57403 = ((y_57403 >>> 0) >>> 1);
					if ((y_57403 == 0)) {
					break L1;
					}
					
					stareq__40735(x_57402, 0, x_57402[0]);
				}
		} while(false);

	return result_57079[0];

}

function getTheta_57447(gear_57449, r_57450) {
	var result_57451 = 0.0;

	BeforeRet: do {
		var rb_57452 = (getdb_57043(gear_57449) / 2.0000000000000000e+000);
		result_57451 = (Math.sqrt((roof__57072(r_57450, 2) - roof__57072(rb_57452, 2))) / rb_57452);
		break BeforeRet;
	} while (false);

	return result_57451;

}

function seqToPtr_58009(x_58014) {
		return x_58014

	
}

function eqeq__58247(x_58251, y_58253) {
	var result_58254 = false;

	BeforeRet: do {
		if (!((x_58251.x == y_58253.x))) {
		result_58254 = false;
		break BeforeRet;
		}
		
		if (!((x_58251.y == y_58253.y))) {
		result_58254 = false;
		break BeforeRet;
		}
		
		result_58254 = true;
		break BeforeRet;
	} while (false);

	return result_58254;

}

function eqeq__57747(x_57752, y_57755) {
	var result_57756 = false;

	BeforeRet: do {
		if ((seqToPtr_58009(x_57752) == seqToPtr_58009(y_57755))) {
		result_57756 = true;
		break BeforeRet;
		}
		
		if (((x_57752 === null) || (y_57755 === null))) {
		result_57756 = false;
		break BeforeRet;
		}
		
		if (!(((x_57752 != null ? x_57752.length : 0) == (y_57755 != null ? y_57755.length : 0)))) {
		result_57756 = false;
		break BeforeRet;
		}
		
		L1: do {
			var i_58245 = 0;
			var colontmp__58265 = 0;
			colontmp__58265 = ((x_57752 != null ? x_57752.length : 0) - 1);
			var res_58268 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_58268 <= colontmp__58265)) break L3;
						i_58245 = res_58268;
						if (!(eqeq__58247(x_57752[i_58245], y_57755[i_58245]))) {
						result_57756 = false;
						break BeforeRet;
						}
						
						res_58268 += 1;
					}
			} while(false);
		} while(false);
		result_57756 = true;
		break BeforeRet;
	} while (false);

	return result_57756;

}

function safeAdd_57736(x_57742, x_57742_Idx, y_57744) {
		if (eqeq__57747(x_57742[x_57742_Idx], null)) {
		x_57742[x_57742_Idx] = nimCopy(null, [y_57744], NTI58283);
		}
		else {
			var Tmp1 = nimCopy(null, y_57744, NTI42021);
		if (x_57742[x_57742_Idx] != null) { x_57742[x_57742_Idx].push(Tmp1); } else { x_57742[x_57742_Idx] = [Tmp1]; };
		}
		

	
}

function getInvPoint_57610(a_57612, theta_57613) {
	var result_57614 = {x: 0.0, y: 0.0};

	BeforeRet: do {
		var x_57615 = (a_57612 * (Math.cos(theta_57613) + (theta_57613 * Math.sin(theta_57613))));
		var y_57616 = (a_57612 * (Math.sin(theta_57613) - (theta_57613 * Math.cos(theta_57613))));
		nimCopy(result_57614, {x: x_57615, y: y_57616}, NTI42021);
		break BeforeRet;
	} while (false);

	return result_57614;

}

function pluseq__40745(x_40750, x_40750_Idx, y_40752) {
		x_40750[x_40750_Idx] = (x_40750[x_40750_Idx] + y_40752);

	
}

function isContained_57470(x_57472, y_57473, threshold_57474) {
		var Tmp1;

	var result_57475 = false;

	BeforeRet: do {
		var distance_57492 = (Math.sqrt((1.0000000000000000e+000 + (roof__57072(y_57473, 2) / roof__57072(x_57472, 2)))) * x_57472);
		if ((distance_57492 <= threshold_57474)) {
		Tmp1 = true;
		}
		else {
		Tmp1 = false;
		}
		
		result_57475 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_57475;

}

function getIndex_57494(involute_57497, r_57498) {
	var result_57499 = 0;

	BeforeRet: do {
		var i_57507 = 0;
		L1: do {
				L2: while (true) {
				if (!isContained_57470(involute_57497[i_57507].x, involute_57497[i_57507].y, r_57498)) break L2;
					i_57507 += 1;
				}
		} while(false);
		result_57499 = i_57507;
		break BeforeRet;
	} while (false);

	return result_57499;

}

function amp__58431(x_58436, y_58439) {
	var result_58441 = null;

		result_58441 = new Array(((x_58436 != null ? x_58436.length : 0) + (y_58439 != null ? y_58439.length : 0))); for (var i=0;i<((x_58436 != null ? x_58436.length : 0) + (y_58439 != null ? y_58439.length : 0));++i) {result_58441[i]={x: 0.0, y: 0.0};}		L1: do {
			var i_58482 = 0;
			var colontmp__58508 = 0;
			colontmp__58508 = ((x_58436 != null ? x_58436.length : 0) - 1);
			var res_58511 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_58511 <= colontmp__58508)) break L3;
						i_58482 = res_58511;
						nimCopy(result_58441[i_58482], x_58436[i_58482], NTI42021);
						res_58511 += 1;
					}
			} while(false);
		} while(false);
		L4: do {
			var i_58499 = 0;
			var colontmp__58516 = 0;
			colontmp__58516 = ((y_58439 != null ? y_58439.length : 0) - 1);
			var res_58519 = 0;
			L5: do {
					L6: while (true) {
					if (!(res_58519 <= colontmp__58516)) break L6;
						i_58499 = res_58519;
						nimCopy(result_58441[(i_58499 + (x_58436 != null ? x_58436.length : 0))], y_58439[i_58499], NTI42021);
						res_58519 += 1;
					}
			} while(false);
		} while(false);

	return result_58441;

}

function newSeq_57658(len_57662) {
	var result_57664 = null;

		result_57664 = new Array(len_57662); for (var i=0;i<len_57662;++i) {result_57664[i]={x: 0.0, y: 0.0};}
	return result_57664;

}

function reversed_58328(a_58333, first_58335, last_58337) {
	var result_58339 = null;

		var i_58401 = (last_58337 - first_58335);
		var x_58402 = first_58335;
		result_58339 = nimCopy(null, newSeq_57658((i_58401 + 1)), NTI57663);
		L1: do {
				L2: while (true) {
				if (!(0 <= i_58401)) break L2;
					nimCopy(result_58339[i_58401], a_58333[x_58402], NTI42021);
					i_58401 -= 1;
					x_58402 += 1;
				}
		} while(false);

	return result_58339;

}

function getInvolute_57710(gear_57712, dtheta_57713) {
		var Tmp1;

	var result_57715 = null;

	BeforeRet: do {
		var ra_57716 = (getda_57047(gear_57712) / 2.0000000000000000e+000);
		var rb_57717 = (getdb_57043(gear_57712) / 2.0000000000000000e+000);
		var rf_57718 = (getdf_57051(gear_57712) / 2.0000000000000000e+000);
		if ((getdf_57051(gear_57712) < getdb_57043(gear_57712))) {
		Tmp1 = getTheta_57447(gear_57712, rb_57717);
		}
		else {
		Tmp1 = getTheta_57447(gear_57712, rf_57718);
		}
		
		var theta0_57719 = Tmp1;
		var n_57720 = Math.floor(((getTheta_57447(gear_57712, ra_57716) - theta0_57719) / dtheta_57713));
		var maxTheta_57721 = getTheta_57447(gear_57712, ra_57716);
		var points_57723 = [null];
		var theta_57724 = [theta0_57719];
		L2: do {
			var i_57734 = 0;
			var i_58552 = 0;
			L3: do {
					L4: while (true) {
					if (!(i_58552 < n_57720)) break L4;
						i_57734 = i_58552;
						safeAdd_57736(points_57723, 0, getInvPoint_57610(rb_57717, theta_57724[0]));
						pluseq__40745(theta_57724, 0, dtheta_57713);
						i_58552 += 1;
					}
			} while(false);
		} while(false);
		safeAdd_57736(points_57723, 0, getInvPoint_57610(rb_57717, maxTheta_57721));
		if ((getdf_57051(gear_57712) < getdb_57043(gear_57712))) {
		var rfrev_58316 = (((2.0000000000000000e+000 * getdb_57043(gear_57712)) - getdf_57051(gear_57712)) / 2.0000000000000000e+000);
		var idf_58317 = getIndex_57494(points_57723[0], rfrev_58316);
		points_57723[0] = nimCopy(null, amp__58431(reversed_58328(points_57723[0], 1, idf_58317), points_57723[0]), NTI58440);
		L5: do {
			var i_58539 = 0;
			var i_58560 = 0;
			L6: do {
					L7: while (true) {
					if (!(i_58560 < idf_58317)) break L7;
						i_58539 = i_58560;
						var diff_58540 = (points_57723[0][i_58539].x - rb_57717);
						points_57723[0][i_58539].x = (rb_57717 - diff_58540);
						i_58560 += 1;
					}
			} while(false);
		} while(false);
		}
		
		result_57715 = nimCopy(null, points_57723[0], NTI57722);
		break BeforeRet;
	} while (false);

	return result_57715;

}

function getCCW_57620(involute_57623) {
	var result_57625 = null;

	BeforeRet: do {
		var first_57633 = 0;
		var last_57642 = (involute_57623 != null ? (involute_57623.length-1) : -1);
		var involuteCCW_57689 = newSeq_57658((involute_57623 != null ? involute_57623.length : 0));
		L1: do {
			var i_57699 = 0;
			var res_57706 = first_57633;
			L2: do {
					L3: while (true) {
					if (!(res_57706 <= last_57642)) break L3;
						i_57699 = res_57706;
						involuteCCW_57689[i_57699].x = involute_57623[i_57699].x;
						involuteCCW_57689[i_57699].y = -(involute_57623[i_57699].y);
						res_57706 += 1;
					}
			} while(false);
		} while(false);
		result_57625 = nimCopy(null, involuteCCW_57689, NTI57643);
		break BeforeRet;
	} while (false);

	return result_57625;

}

function setElements_42116(t_42119, ax_42120, ay_42121, bx_42122, by_42123, tx_42124, ty_42125) {
		t_42119.ax = ax_42120;
		t_42119.ay = ay_42121;
		t_42119.bx = bx_42122;
		t_42119.by = by_42123;
		t_42119.tx = tx_42124;
		t_42119.ty = ty_42125;

	
}

function rotate_42197(rad_42199) {
	var result_42200 = [{ax: 0.0, ay: 0.0, bx: 0.0, by: 0.0, tx: 0.0, ty: 0.0}];

		var s_42201 = Math.sin(rad_42199);
		var c_42202 = Math.cos(rad_42199);
		setElements_42116(result_42200[0], c_42202, s_42201, -(s_42201), c_42202, 0.0, 0.0);

	return result_42200[0];

}

function ampeq__42959(p_42962, t_42963) {
		var newx_42964 = (((p_42962.x * t_42963.ax) + (p_42962.y * t_42963.bx)) + t_42963.tx);
		p_42962.y = (((p_42962.x * t_42963.ay) + (p_42962.y * t_42963.by)) + t_42963.ty);
		p_42962.x = newx_42964;

	
}

function rotate_57519(points_57523, points_57523_Idx, theta_57524) {
		var matrix_57525 = rotate_42197(theta_57524);
		L1: do {
			var i_57550 = 0;
			var colontmp__57554 = 0;
			colontmp__57554 = (points_57523[points_57523_Idx] != null ? (points_57523[points_57523_Idx].length-1) : -1);
			var res_57557 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_57557 <= colontmp__57554)) break L3;
						i_57550 = res_57557;
						ampeq__42959(points_57523[points_57523_Idx][i_57550], matrix_57525);
						res_57557 += 1;
					}
			} while(false);
		} while(false);

	
}

function getInvolutes_58562(gear_58564, dtheta_58565, direction_58566) {
		var Tmp1;

		var divrad_58568 = (6.2831853071795862e+000 / gear_58564.z);
		switch (direction_58566) {
		case 0:
			Tmp1 = 1.5707963267948966e+000;
			break;
		case 1:
			Tmp1 = 0.0;
			break;
		case 2:
			Tmp1 = -1.5707963267948966e+000;
			break;
		default: 
			Tmp1 = 3.1415926535897931e+000;
			break;
		}
		var thetaOffset_58572 = Tmp1;
		var theta_58573 = (Math.tan(gear_58564.alpha) - gear_58564.alpha);
		var involute_58575 = [getInvolute_57710(gear_58564, dtheta_58565)];
		var involuteCCW_58577 = [getCCW_57620(involute_58575[0])];
		rotate_57519(involute_58575, 0, (thetaOffset_58572 - theta_58573));
		rotate_57519(involuteCCW_58577, 0, ((divrad_58568 / 2.0000000000000000e+000) + (theta_58573 * 2.0000000000000000e+000)));
		rotate_57519(involuteCCW_58577, 0, (thetaOffset_58572 - theta_58573));
		gear_58564.involutes[0] = nimCopy(null, involute_58575[0], NTI58574);
		gear_58564.involutesCCW[0] = nimCopy(null, involuteCCW_58577[0], NTI58576);
		L2: do {
			var i_58590 = 0;
			var colontmp__58599 = 0;
			colontmp__58599 = gear_58564.z;
			var i_58602 = 1;
			L3: do {
					L4: while (true) {
					if (!(i_58602 < colontmp__58599)) break L4;
						i_58590 = i_58602;
						rotate_57519(involute_58575, 0, divrad_58568);
						rotate_57519(involuteCCW_58577, 0, divrad_58568);
						gear_58564.involutes[i_58590] = nimCopy(null, involute_58575[0], NTI58574);
						gear_58564.involutesCCW[i_58590] = nimCopy(null, involuteCCW_58577[0], NTI58576);
						i_58602 += 1;
					}
			} while(false);
		} while(false);

	
}

function init_59577(gear_59580, gear_59580_Idx, m_59581, z_59582, alpha_59583, dtheta_59584, width_59585, height_59586, direction_59587) {
		var Tmp1;
		var Tmp2;

		gear_59580[gear_59580_Idx] = {m: 0.0, z: 0, alpha: 0.0, involutes: null, involutesCCW: null, centerx: 0.0, centery: 0.0};
		gear_59580[gear_59580_Idx].m = m_59581;
		gear_59580[gear_59580_Idx].z = z_59582;
		gear_59580[gear_59580_Idx].alpha = alpha_59583;
		gear_59580[gear_59580_Idx].involutes = nimCopy(null, newSeq_59612(z_59582), NTI59617);
		gear_59580[gear_59580_Idx].involutesCCW = nimCopy(null, newSeq_59612(z_59582), NTI59617);
		switch (direction_59587) {
		case 3:
			Tmp1 = ((width_59585 - getd_57039(gear_59580[gear_59580_Idx])) / 2.0000000000000000e+000);
			break;
		case 1:
			Tmp1 = ((width_59585 + getd_57039(gear_59580[gear_59580_Idx])) / 2.0000000000000000e+000);
			break;
		default: 
			Tmp1 = (height_59586 / 2.0000000000000000e+000);
			break;
		}
		gear_59580[gear_59580_Idx].centerx = Tmp1;
		switch (direction_59587) {
		case 0:
			Tmp2 = ((height_59586 - getd_57039(gear_59580[gear_59580_Idx])) / 2.0000000000000000e+000);
			break;
		case 2:
			Tmp2 = ((height_59586 + getd_57039(gear_59580[gear_59580_Idx])) / 2.0000000000000000e+000);
			break;
		default: 
			Tmp2 = (height_59586 / 2.0000000000000000e+000);
			break;
		}
		gear_59580[gear_59580_Idx].centery = Tmp2;
		getInvolutes_58562(gear_59580[gear_59580_Idx], dtheta_59584, direction_59587);

	
}

function init_59665(gears_59668, gears_59668_Idx, m_59669, z1_59670, z2_59671, alpha_59672, dtheta_59673, width_59674, height_59675) {
		gears_59668[gears_59668_Idx] = {gear1: null, gear2: null};
		init_59577(gears_59668[gears_59668_Idx], "gear1", m_59669, z1_59670, alpha_59672, dtheta_59673, width_59674, height_59675, 0);
		init_59577(gears_59668[gears_59668_Idx], "gear2", m_59669, z2_59671, alpha_59672, dtheta_59673, width_59674, height_59675, 2);

	
}

function radToDeg_43447(rad_43449) {
	var result_43450 = 0.0;

		result_43450 = (rad_43449 * 5.7295779513082323e+001);

	return result_43450;

}

function round_40707(x_40711, places_40713) {
	var result_40714 = 0.0;

		if ((places_40713 == 0)) {
		result_40714 = Math.round(x_40711);
		}
		else {
			var mult_40715 = Math.pow(1.0000000000000000e+001, places_40713);
			result_40714 = (Math.round((x_40711 * mult_40715)) / mult_40715);
		}
		

	return result_40714;

}

function getha_57055(gear_57057) {
	var result_57058 = 0.0;

	BeforeRet: do {
		result_57058 = gear_57057.m;
		break BeforeRet;
	} while (false);

	return result_57058;

}

function geth_57059(gear_57061) {
	var result_57062 = 0.0;

	BeforeRet: do {
		result_57062 = (2.2500000000000000e+000 * gear_57061.m);
		break BeforeRet;
	} while (false);

	return result_57062;

}

function showParameter_59501(gear_59503, name_59504) {
		document.getElementById(toJSStr((makeNimstrLit("m-").slice(0,-1)).concat(name_59504))).innerHTML = toJSStr(cstrToNimstr((gear_59503.m)+""));
		document.getElementById(toJSStr((makeNimstrLit("alpha-").slice(0,-1)).concat(name_59504))).innerHTML = toJSStr(cstrToNimstr((radToDeg_43447(gear_59503.alpha))+""));
		document.getElementById(toJSStr((makeNimstrLit("z-").slice(0,-1)).concat(name_59504))).innerHTML = toJSStr(cstrToNimstr((gear_59503.z)+""));
		document.getElementById(toJSStr((makeNimstrLit("d-").slice(0,-1)).concat(name_59504))).innerHTML = toJSStr(cstrToNimstr((round_40707(getd_57039(gear_59503), 2))+""));
		document.getElementById(toJSStr((makeNimstrLit("db-").slice(0,-1)).concat(name_59504))).innerHTML = toJSStr(cstrToNimstr((round_40707(getdb_57043(gear_59503), 2))+""));
		document.getElementById(toJSStr((makeNimstrLit("ha-").slice(0,-1)).concat(name_59504))).innerHTML = toJSStr(cstrToNimstr((round_40707(getha_57055(gear_59503), 2))+""));
		document.getElementById(toJSStr((makeNimstrLit("h-").slice(0,-1)).concat(name_59504))).innerHTML = toJSStr(cstrToNimstr((round_40707(geth_57059(gear_59503), 2))+""));
		document.getElementById(toJSStr((makeNimstrLit("da-").slice(0,-1)).concat(name_59504))).innerHTML = toJSStr(cstrToNimstr((round_40707(getda_57047(gear_59503), 2))+""));
		document.getElementById(toJSStr((makeNimstrLit("df-").slice(0,-1)).concat(name_59504))).innerHTML = toJSStr(cstrToNimstr((round_40707(getdf_57051(gear_59503), 2))+""));

	
}

function geta_57063(gears_57065) {
	var result_57066 = 0.0;

	BeforeRet: do {
		result_57066 = ((getd_57039(gears_57065.gear1) + getd_57039(gears_57065.gear2)) / 2.0000000000000000e+000);
		break BeforeRet;
	} while (false);

	return result_57066;

}

function showParameter_59553(gears_59555) {
		showParameter_59501(gears_59555.gear1, makeNimstrLit("gear1"));
		showParameter_59501(gears_59555.gear2, makeNimstrLit("gear2"));
		document.getElementById("a").innerHTML = toJSStr(cstrToNimstr((round_40707(geta_57063(gears_59555), 2))+""));

	
}

function resize_59686(canvas_59688, maxwidth_59689, gears_59690) {
		var Tmp1;

		if (((1.6000000000000001e+000 * maxwidth_59689) <= window.innerWidth)) {
		Tmp1 = Math.floor(((1.6000000000000001e+000 * maxwidth_59689) / 2.0000000000000000e+000));
		}
		else {
		if ((maxwidth_59689 <= window.innerWidth)) {
		Tmp1 = Math.floor(maxwidth_59689 / 2);
		}
		else {
		Tmp1 = window.innerWidth;
		}
		}
		var width_59691 = Tmp1;
		canvas_59688.width = width_59691;
		gears_59690.gear1.centerx = (width_59691 / 2.0000000000000000e+000);
		gears_59690.gear2.centerx = (width_59691 / 2.0000000000000000e+000);

	
}

function getContext2D_56513(c_56515) {
	var result_56516 = null;

		result_56516=c_56515.getContext('2d');

	return result_56516;

}

function fillStyleeq__56089(ctx_56091, color_56092) {
		ctx_56091.fillStyle=color_56092;

	
}

function cls_59495(ctx_59497, width_59498, height_59499, color_59500) {
		fillStyleeq__56089(ctx_59497, color_59500);
		ctx_59497.fillRect(0.0, 0.0, width_59498, height_59499);

	
}

function strokeStyleeq__56101(ctx_56103, color_56104) {
		ctx_56103.strokeStyle=color_56104;

	
}

function drawCenter_59009(ctx_59011, gear_59012, lineLength_59013, lineWidth_59014, color_59015) {
		var x_59016 = gear_59012.centerx;
		var y_59017 = gear_59012.centery;
		var offset_59018 = (lineLength_59013 / 2.0000000000000000e+000);
		strokeStyleeq__56101(ctx_59011, color_59015);
		ctx_59011.lineWidth = lineWidth_59014;
		ctx_59011.beginPath();
		ctx_59011.moveTo((x_59016 - offset_59018), y_59017);
		ctx_59011.lineTo((x_59016 + offset_59018), y_59017);
		ctx_59011.stroke();
		ctx_59011.beginPath();
		ctx_59011.moveTo(x_59016, (y_59017 - offset_59018));
		ctx_59011.lineTo(x_59016, (y_59017 + offset_59018));
		ctx_59011.stroke();

	
}

function drawPolygonalLine_58604(ctx_58606, points_58608, xoffset_58609, yoffset_58610, lineWidth_58611, color_58612) {
		strokeStyleeq__56101(ctx_58606, color_58612);
		ctx_58606.lineWidth = lineWidth_58611;
		ctx_58606.beginPath();
		ctx_58606.moveTo((points_58608[0].x + xoffset_58609), (points_58608[0].y + yoffset_58610));
		L1: do {
			var point_59002 = {x: 0.0, y: 0.0};
			var i_59006 = 0;
			var L_59008 = (points_58608 != null ? points_58608.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_59006 < L_59008)) break L3;
						nimCopy(point_59002, points_58608[i_59006], NTI42021);
						ctx_58606.lineTo((point_59002.x + xoffset_58609), (point_59002.y + yoffset_58610));
						i_59006 += 1;
					}
			} while(false);
		} while(false);
		ctx_58606.stroke();

	
}

function getTheta_57067(point_57069) {
	var result_57070 = 0.0;

	BeforeRet: do {
		var r_57443 = Math.sqrt((roof__57072(point_57069.x, 2) + roof__57072(point_57069.y, 2)));
		if ((0.0 <= point_57069.y)) {
		result_57070 = Math.acos((point_57069.x / r_57443));
		break BeforeRet;
		}
		else {
			result_57070 = (6.2831853071795862e+000 - Math.acos((point_57069.x / r_57443)));
			break BeforeRet;
		}
		
	} while (false);

	return result_57070;

}

function drawda_59022(ctx_59024, involute_59026, involuteCCW_59027, xoffset_59028, yoffset_59029, lineWidth_59030, color_59031) {
		var last_59209 = (involute_59026 != null ? (involute_59026.length-1) : -1);
		var theta0_59210 = getTheta_57067(involute_59026[last_59209]);
		var theta1_59211 = getTheta_57067(involuteCCW_59027[last_59209]);
		var ra_59228 = Math.sqrt((roof__57072(involute_59026[last_59209].x, 2) + roof__57072(involute_59026[last_59209].y, 2)));
		ctx_59024.beginPath();
		ctx_59024.arc(xoffset_59028, yoffset_59029, ra_59228, theta0_59210, theta1_59211, false);
		ctx_59024.stroke();

	
}

function drawdf_59233(ctx_59235, involute0_59237, involute1_59238, xoffset_59239, yoffset_59240, lineWidth_59241, color_59242) {
		var first_59408 = 0;
		var theta0_59409 = getTheta_57067(involute0_59237[first_59408]);
		var theta1_59410 = getTheta_57067(involute1_59238[first_59408]);
		var point_59411 = nimCopy(null, involute0_59237[first_59408], NTI42021);
		var rf_59428 = Math.sqrt((roof__57072(point_59411.x, 2) + roof__57072(point_59411.y, 2)));
		ctx_59235.beginPath();
		ctx_59235.arc(xoffset_59239, yoffset_59240, rf_59428, theta0_59409, theta1_59410, false);
		ctx_59235.stroke();

	
}

function drawGear_59434(ctx_59436, gear_59437, color_59438) {
		var first_59446 = 0;
		var last_59455 = (gear_59437.involutes != null ? (gear_59437.involutes.length-1) : -1);
		L1: do {
			var i_59465 = 0;
			var res_59481 = first_59446;
			L2: do {
					L3: while (true) {
					if (!(res_59481 <= last_59455)) break L3;
						i_59465 = res_59481;
						drawPolygonalLine_58604(ctx_59436, gear_59437.involutes[i_59465], gear_59437.centerx, gear_59437.centery, 1.0000000000000000e+000, color_59438);
						drawPolygonalLine_58604(ctx_59436, gear_59437.involutesCCW[i_59465], gear_59437.centerx, gear_59437.centery, 1.0000000000000000e+000, color_59438);
						drawda_59022(ctx_59436, gear_59437.involutes[i_59465], gear_59437.involutesCCW[i_59465], gear_59437.centerx, gear_59437.centery, 1.0000000000000000e+000, color_59438);
						res_59481 += 1;
					}
			} while(false);
		} while(false);
		L4: do {
			var i_59475 = 0;
			var i_59488 = first_59446;
			L5: do {
					L6: while (true) {
					if (!(i_59488 < last_59455)) break L6;
						i_59475 = i_59488;
						drawdf_59233(ctx_59436, gear_59437.involutesCCW[i_59475], gear_59437.involutes[(i_59475 + 1)], gear_59437.centerx, gear_59437.centery, 1.0000000000000000e+000, color_59438);
						i_59488 += 1;
					}
			} while(false);
		} while(false);
		drawdf_59233(ctx_59436, gear_59437.involutesCCW[last_59455], gear_59437.involutes[first_59446], gear_59437.centerx, gear_59437.centery, 1.0000000000000000e+000, color_59438);

	
}

function drawGears_59490(ctx_59492, gears_59493, color_59494) {
		drawGear_59434(ctx_59492, gears_59493.gear1, color_59494);
		drawGear_59434(ctx_59492, gears_59493.gear2, color_59494);

	
}

function rotate_57561(gear_57563, theta_57564) {
		L1: do {
			var i_57589 = 0;
			var colontmp__57593 = 0;
			colontmp__57593 = (gear_57563.involutes != null ? (gear_57563.involutes.length-1) : -1);
			var res_57596 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_57596 <= colontmp__57593)) break L3;
						i_57589 = res_57596;
						rotate_57519(gear_57563.involutes, i_57589, theta_57564);
						rotate_57519(gear_57563.involutesCCW, i_57589, theta_57564);
						res_57596 += 1;
					}
			} while(false);
		} while(false);

	
}

function rotate_57600(gears_57602, theta1_57603, rotation_57604) {
		var Tmp1;

		switch (rotation_57604) {
		case 0:
			Tmp1 = 1.0000000000000000e+000;
			break;
		default: 
			Tmp1 = -1.0000000000000000e+000;
			break;
		}
		var rot_57606 = Tmp1;
		var theta2_57607 = ((-(theta1_57603) * gears_57602.gear1.z) / gears_57602.gear2.z);
		rotate_57561(gears_57602.gear1, (rot_57606 * theta1_57603));
		rotate_57561(gears_57602.gear2, (rot_57606 * theta2_57607));

	
}

function loop_59564(canvas_59566, gears_59567) {
		var ctx_59571 = getContext2D_56513(canvas_59566);
		var width_59572 = canvas_59566.width;
		var height_59573 = canvas_59566.height;
		cls_59495(ctx_59571, width_59572, height_59573, canvas_59566.style.backgroundColor);
		drawCenter_59009(ctx_59571, gears_59567.gear1, 8.0000000000000000e+000, 1.0000000000000000e+000, "#FBFAF5");
		drawCenter_59009(ctx_59571, gears_59567.gear2, 8.0000000000000000e+000, 1.0000000000000000e+000, "#FBFAF5");
		drawGears_59490(ctx_59571, gears_59567, "#FBFAF5");
		rotate_57600(gears_59567, 3.4906585039886592e-003, 0);

	
}

function init_59693(maxwidth_59695, maxheight_59696, canvasid_59697, bgcolor_59698, ms_59699, m_59700, z1_59701, z2_59702, alpha_59703, dtheta_59704, zoom_59705, show_59706) {

		function colonanonymous__59713() {
				loop_59564(canvas_59709, gears_59710[0]);

			
		}

		function colonanonymous__59716(e_59718) {
				resize_59686(canvas_59709, maxwidth_59695, gears_59710[0]);

			
		}

		var width_59707 = nimMin(maxwidth_59695, window.innerWidth);
		var height_59708 = maxheight_59696;
		var canvas_59709 = document.getElementById(canvasid_59697);
		var gears_59710 = [null];
		init_59665(gears_59710, 0, (m_59700 * zoom_59705), z1_59701, z2_59702, alpha_59703, dtheta_59704, width_59707, height_59708);
		switch (show_59706) {
		case 0:
			showParameter_59553(gears_59710[0]);
			break;
		default: 
			break;
		}
		canvas_59709.width = width_59707;
		canvas_59709.height = height_59708;
		canvas_59709.style.backgroundColor = bgcolor_59698;
		resize_59686(canvas_59709, maxwidth_59695, gears_59710[0]);
		var timer_59715 = window.setInterval(colonanonymous__59713, ms_59699);
		window.addEventListener("resize", colonanonymous__59716, false);

	
}

function main_59724() {
		randomize_53001();
		var z1_59769 = random_59761(dotdot__37462(30, 71));
		var z2_59795 = random_59761(dotdot__37462(30, 71));
		init_59693(600, 600, "involute", "#302833", 16, 4.0000000000000000e+000, z1_59769, z2_59795, 3.4906585039886590e-001, 6.9813170079773182e-002, 1.0000000000000000e+000, 0);
		init_59693(600, 600, "involute-zoom", "#302833", 16, 4.0000000000000000e+000, z1_59769, z2_59795, 3.4906585039886590e-001, 6.9813170079773182e-002, 5.0000000000000000e+000, 1);

	
}
if (true) {
main_59724();
}


function matrix2d_42040(ax_42042, ay_42043, bx_42044, by_42045, tx_42046, ty_42047) {
	var result_42134 = [{ax: 0.0, ay: 0.0, bx: 0.0, by: 0.0, tx: 0.0, ty: 0.0}];

		setElements_42116(result_42134[0], ax_42042, ay_42043, bx_42044, by_42045, tx_42046, ty_42047);

	return result_42134[0];

}

function point2d_42052(x_42054, y_42055) {
	var result_42918 = {x: 0.0, y: 0.0};

		result_42918.x = x_42054;
		result_42918.y = y_42055;

	return result_42918;

}

function vector2d_42048(x_42050, y_42051) {
	var result_42319 = {x: 0.0, y: 0.0};

		result_42319.x = x_42050;
		result_42319.y = y_42051;

	return result_42319;

}
