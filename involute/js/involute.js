/* Generated by the Nim Compiler v0.17.2 */
/*   (c) 2017 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI50576 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI50574 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI49643 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI49722 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI50440 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI49663 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI50283 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI3404 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI49401 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI42021 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI51607 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI51625 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NNI42021 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "x", len: 0, typ: NTI124, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI124, name: "y", sons: null}]};
NTI42021.node = NNI42021;
NTI51607.base = NTI42021;
NTI51625.base = NTI51607;
NTI3404.base = NTI104;
var NNI49401 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI124, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI3404, name: "Field1", sons: null}]};
NTI49401.node = NNI49401;
NTI50283.base = NTI42021;
NTI49663.base = NTI42021;
NTI50440.base = NTI42021;
NTI49722.base = NTI42021;
NTI49643.base = NTI42021;
NTI50574.base = NTI42021;
NTI50576.base = NTI42021;

function nimMin(a_19439, b_19440) {
		var Tmp1;

	var result_19441 = 0;

	BeforeRet: do {
		if ((a_19439 <= b_19440)) {
		Tmp1 = a_19439;
		}
		else {
		Tmp1 = b_19440;
		}
		
		result_19441 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_19441;

}

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_19817, src_19818, ti_19819) {
	var result_20229 = null;

		switch (ti_19819.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_19801(ti_19819))) {
			result_20229 = src_19818;
			}
			else {
				result_20229 = [src_19818[0], src_19818[1]];
			}
			
			break;
		case 19:
			      if (dest_19817 === null || dest_19817 === undefined) {
        dest_19817 = {};
      }
      else {
        for (var key in dest_19817) { delete dest_19817[key]; }
      }
      for (var key in src_19818) { dest_19817[key] = src_19818[key]; }
      result_20229 = dest_19817;
    
			break;
		case 18:
		case 17:
			if (!((ti_19819.base == null))) {
			result_20229 = nimCopy(dest_19817, src_19818, ti_19819.base);
			}
			else {
			if ((ti_19819.kind == 17)) {
			result_20229 = (dest_19817 === null || dest_19817 === undefined) ? {m_type: ti_19819} : dest_19817;
			}
			else {
				result_20229 = (dest_19817 === null || dest_19817 === undefined) ? {} : dest_19817;
			}
			}
			nimCopyAux(result_20229, src_19818, ti_19819.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_19818 === null) {
        result_20229 = null;
      }
      else {
        if (dest_19817 === null || dest_19817 === undefined) {
          dest_19817 = new Array(src_19818.length);
        }
        else {
          dest_19817.length = src_19818.length;
        }
        result_20229 = dest_19817;
        for (var i = 0; i < src_19818.length; ++i) {
          result_20229[i] = nimCopy(result_20229[i], src_19818[i], ti_19819.base);
        }
      }
    
			break;
		case 28:
			      if (src_19818 !== null) {
        result_20229 = src_19818.slice(0);
      }
    
			break;
		default: 
			result_20229 = src_19818;
			break;
		}

	return result_20229;

}

function makeNimstrLit(c_14603) {
		    var ln = c_14603.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_14603.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function toJSStr(s_15003) {
		    var len = s_15003.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15003[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15003[i] < 128)
        asciiPart[i] = fcc(s_15003[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function cstrToNimstr(c_14803) {
		  var ln = c_14803.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_14803.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_14803.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}
var nimvm_6119 = false;
var nim_program_result = 0;
var globalRaiseHook_11605 = [null];
var localRaiseHook_11610 = [null];
var outOfMemHook_11613 = [null];
var IDMATRIX_42056 = matrix2d_42040(1.0000000000000000e+000, 0.0, 0.0, 1.0000000000000000e+000, 0.0, 0.0);
var ORIGO_42057 = point2d_42052(0.0, 0.0);
var XAXIS_42058 = vector2d_42048(1.0000000000000000e+000, 0.0);
var YAXIS_42059 = vector2d_42048(0.0, 1.0000000000000000e+000);

function newSeq_51620(len_51624) {
	var result_51626 = null;

		result_51626 = new Array(len_51624); for (var i=0;i<len_51624;++i) {result_51626[i]=null;}
	return result_51626;

}

function isFatPointer_19801(ti_19803) {
	var result_19804 = false;

	BeforeRet: do {
		result_19804 = !((ConstSet1[ti_19803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_19804;

}

function nimCopyAux(dest_19822, src_19823, n_19825) {
		switch (n_19825.kind) {
		case 0:
			break;
		case 1:
			      dest_19822[n_19825.offset] = nimCopy(dest_19822[n_19825.offset], src_19823[n_19825.offset], n_19825.typ);
    
			break;
		case 2:
			L1: do {
				var i_20215 = 0;
				var colontmp__20217 = 0;
				colontmp__20217 = (n_19825.len - 1);
				var res_20220 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20220 <= colontmp__20217)) break L3;
							i_20215 = res_20220;
							nimCopyAux(dest_19822, src_19823, n_19825.sons[i_20215]);
							res_20220 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_19822[n_19825.offset] = nimCopy(dest_19822[n_19825.offset], src_19823[n_19825.offset], n_19825.typ);
      for (var i = 0; i < n_19825.sons.length; ++i) {
        nimCopyAux(dest_19822, src_19823, n_19825.sons[i][1]);
      }
    
			break;
		}

	
}

function getd_49039(gear_49041) {
	var result_49042 = 0.0;

	BeforeRet: do {
		result_49042 = (gear_49041.m * gear_49041.z);
		break BeforeRet;
	} while (false);

	return result_49042;

}

function getda_49047(gear_49049) {
	var result_49050 = 0.0;

	BeforeRet: do {
		result_49050 = (getd_49039(gear_49049) + (2.0000000000000000e+000 * gear_49049.m));
		break BeforeRet;
	} while (false);

	return result_49050;

}

function getdb_49043(gear_49045) {
	var result_49046 = 0.0;

	BeforeRet: do {
		result_49046 = (getd_49039(gear_49045) * Math.cos(gear_49045.alpha));
		break BeforeRet;
	} while (false);

	return result_49046;

}

function getdf_49051(gear_49053) {
	var result_49054 = 0.0;

	BeforeRet: do {
		result_49054 = (getd_49039(gear_49053) - (2.5000000000000000e+000 * gear_49053.m));
		break BeforeRet;
	} while (false);

	return result_49054;

}

function stareq__40735(x_40740, x_40740_Idx, y_40742) {
		x_40740[x_40740_Idx] = (x_40740[x_40740_Idx] * y_40742);

	
}

function roof__49072(x_49076, y_49078) {
	var result_49079 = [0.0];

		var colontmp__51798 = {Field0: 0.0, Field1: 0};
		var x_49402 = [0.0];
		var y_49403 = 0;
		nimCopy(colontmp__51798, {Field0: x_49076, Field1: y_49078}, NTI49401);
		x_49402[0] = colontmp__51798["Field0"];
		y_49403 = colontmp__51798["Field1"];
		result_49079[0] = 1.0000000000000000e+000;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					if (!(((y_49403 & 1) == 0))) {
					stareq__40735(result_49079, 0, x_49402[0]);
					}
					
					y_49403 = ((y_49403 >>> 0) >>> 1);
					if ((y_49403 == 0)) {
					break L1;
					}
					
					stareq__40735(x_49402, 0, x_49402[0]);
				}
		} while(false);

	return result_49079[0];

}

function getTheta_49447(gear_49449, r_49450) {
	var result_49451 = 0.0;

	BeforeRet: do {
		var rb_49452 = (getdb_49043(gear_49449) / 2.0000000000000000e+000);
		result_49451 = (Math.sqrt((roof__49072(r_49450, 2) - roof__49072(rb_49452, 2))) / rb_49452);
		break BeforeRet;
	} while (false);

	return result_49451;

}

function seqToPtr_50009(x_50014) {
		return x_50014

	
}

function eqeq__50247(x_50251, y_50253) {
	var result_50254 = false;

	BeforeRet: do {
		if (!((x_50251.x == y_50253.x))) {
		result_50254 = false;
		break BeforeRet;
		}
		
		if (!((x_50251.y == y_50253.y))) {
		result_50254 = false;
		break BeforeRet;
		}
		
		result_50254 = true;
		break BeforeRet;
	} while (false);

	return result_50254;

}

function eqeq__49747(x_49752, y_49755) {
	var result_49756 = false;

	BeforeRet: do {
		if ((seqToPtr_50009(x_49752) == seqToPtr_50009(y_49755))) {
		result_49756 = true;
		break BeforeRet;
		}
		
		if (((x_49752 === null) || (y_49755 === null))) {
		result_49756 = false;
		break BeforeRet;
		}
		
		if (!(((x_49752 != null ? x_49752.length : 0) == (y_49755 != null ? y_49755.length : 0)))) {
		result_49756 = false;
		break BeforeRet;
		}
		
		L1: do {
			var i_50245 = 0;
			var colontmp__50265 = 0;
			colontmp__50265 = ((x_49752 != null ? x_49752.length : 0) - 1);
			var res_50268 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_50268 <= colontmp__50265)) break L3;
						i_50245 = res_50268;
						if (!(eqeq__50247(x_49752[i_50245], y_49755[i_50245]))) {
						result_49756 = false;
						break BeforeRet;
						}
						
						res_50268 += 1;
					}
			} while(false);
		} while(false);
		result_49756 = true;
		break BeforeRet;
	} while (false);

	return result_49756;

}

function safeAdd_49736(x_49742, x_49742_Idx, y_49744) {
		if (eqeq__49747(x_49742[x_49742_Idx], null)) {
		x_49742[x_49742_Idx] = nimCopy(null, [y_49744], NTI50283);
		}
		else {
			var Tmp1 = nimCopy(null, y_49744, NTI42021);
		if (x_49742[x_49742_Idx] != null) { x_49742[x_49742_Idx].push(Tmp1); } else { x_49742[x_49742_Idx] = [Tmp1]; };
		}
		

	
}

function getInvPoint_49610(a_49612, theta_49613) {
	var result_49614 = {x: 0.0, y: 0.0};

	BeforeRet: do {
		var x_49615 = (a_49612 * (Math.cos(theta_49613) + (theta_49613 * Math.sin(theta_49613))));
		var y_49616 = (a_49612 * (Math.sin(theta_49613) - (theta_49613 * Math.cos(theta_49613))));
		nimCopy(result_49614, {x: x_49615, y: y_49616}, NTI42021);
		break BeforeRet;
	} while (false);

	return result_49614;

}

function pluseq__40745(x_40750, x_40750_Idx, y_40752) {
		x_40750[x_40750_Idx] = (x_40750[x_40750_Idx] + y_40752);

	
}

function isContained_49470(x_49472, y_49473, threshold_49474) {
		var Tmp1;

	var result_49475 = false;

	BeforeRet: do {
		var distance_49492 = (Math.sqrt((1.0000000000000000e+000 + (roof__49072(y_49473, 2) / roof__49072(x_49472, 2)))) * x_49472);
		if ((distance_49492 <= threshold_49474)) {
		Tmp1 = true;
		}
		else {
		Tmp1 = false;
		}
		
		result_49475 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_49475;

}

function getIndex_49494(involute_49497, r_49498) {
	var result_49499 = 0;

	BeforeRet: do {
		var i_49507 = 0;
		L1: do {
				L2: while (true) {
				if (!isContained_49470(involute_49497[i_49507].x, involute_49497[i_49507].y, r_49498)) break L2;
					i_49507 += 1;
				}
		} while(false);
		result_49499 = i_49507;
		break BeforeRet;
	} while (false);

	return result_49499;

}

function amp__50431(x_50436, y_50439) {
	var result_50441 = null;

		result_50441 = new Array(((x_50436 != null ? x_50436.length : 0) + (y_50439 != null ? y_50439.length : 0))); for (var i=0;i<((x_50436 != null ? x_50436.length : 0) + (y_50439 != null ? y_50439.length : 0));++i) {result_50441[i]={x: 0.0, y: 0.0};}		L1: do {
			var i_50482 = 0;
			var colontmp__50508 = 0;
			colontmp__50508 = ((x_50436 != null ? x_50436.length : 0) - 1);
			var res_50511 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_50511 <= colontmp__50508)) break L3;
						i_50482 = res_50511;
						nimCopy(result_50441[i_50482], x_50436[i_50482], NTI42021);
						res_50511 += 1;
					}
			} while(false);
		} while(false);
		L4: do {
			var i_50499 = 0;
			var colontmp__50516 = 0;
			colontmp__50516 = ((y_50439 != null ? y_50439.length : 0) - 1);
			var res_50519 = 0;
			L5: do {
					L6: while (true) {
					if (!(res_50519 <= colontmp__50516)) break L6;
						i_50499 = res_50519;
						nimCopy(result_50441[(i_50499 + (x_50436 != null ? x_50436.length : 0))], y_50439[i_50499], NTI42021);
						res_50519 += 1;
					}
			} while(false);
		} while(false);

	return result_50441;

}

function newSeq_49658(len_49662) {
	var result_49664 = null;

		result_49664 = new Array(len_49662); for (var i=0;i<len_49662;++i) {result_49664[i]={x: 0.0, y: 0.0};}
	return result_49664;

}

function reversed_50328(a_50333, first_50335, last_50337) {
	var result_50339 = null;

		var i_50401 = (last_50337 - first_50335);
		var x_50402 = first_50335;
		result_50339 = nimCopy(null, newSeq_49658((i_50401 + 1)), NTI49663);
		L1: do {
				L2: while (true) {
				if (!(0 <= i_50401)) break L2;
					nimCopy(result_50339[i_50401], a_50333[x_50402], NTI42021);
					i_50401 -= 1;
					x_50402 += 1;
				}
		} while(false);

	return result_50339;

}

function getInvolute_49710(gear_49712, dtheta_49713) {
		var Tmp1;

	var result_49715 = null;

	BeforeRet: do {
		var ra_49716 = (getda_49047(gear_49712) / 2.0000000000000000e+000);
		var rb_49717 = (getdb_49043(gear_49712) / 2.0000000000000000e+000);
		var rf_49718 = (getdf_49051(gear_49712) / 2.0000000000000000e+000);
		if ((getdf_49051(gear_49712) < getdb_49043(gear_49712))) {
		Tmp1 = getTheta_49447(gear_49712, rb_49717);
		}
		else {
		Tmp1 = getTheta_49447(gear_49712, rf_49718);
		}
		
		var theta0_49719 = Tmp1;
		var n_49720 = Math.floor(((getTheta_49447(gear_49712, ra_49716) - theta0_49719) / dtheta_49713));
		var maxTheta_49721 = getTheta_49447(gear_49712, ra_49716);
		var points_49723 = [null];
		var theta_49724 = [theta0_49719];
		L2: do {
			var i_49734 = 0;
			var i_50552 = 0;
			L3: do {
					L4: while (true) {
					if (!(i_50552 < n_49720)) break L4;
						i_49734 = i_50552;
						safeAdd_49736(points_49723, 0, getInvPoint_49610(rb_49717, theta_49724[0]));
						pluseq__40745(theta_49724, 0, dtheta_49713);
						i_50552 += 1;
					}
			} while(false);
		} while(false);
		safeAdd_49736(points_49723, 0, getInvPoint_49610(rb_49717, maxTheta_49721));
		if ((getdf_49051(gear_49712) < getdb_49043(gear_49712))) {
		var rfrev_50316 = (((2.0000000000000000e+000 * getdb_49043(gear_49712)) - getdf_49051(gear_49712)) / 2.0000000000000000e+000);
		var idf_50317 = getIndex_49494(points_49723[0], rfrev_50316);
		points_49723[0] = nimCopy(null, amp__50431(reversed_50328(points_49723[0], 1, idf_50317), points_49723[0]), NTI50440);
		L5: do {
			var i_50539 = 0;
			var i_50560 = 0;
			L6: do {
					L7: while (true) {
					if (!(i_50560 < idf_50317)) break L7;
						i_50539 = i_50560;
						var diff_50540 = (points_49723[0][i_50539].x - rb_49717);
						points_49723[0][i_50539].x = (rb_49717 - diff_50540);
						i_50560 += 1;
					}
			} while(false);
		} while(false);
		}
		
		result_49715 = nimCopy(null, points_49723[0], NTI49722);
		break BeforeRet;
	} while (false);

	return result_49715;

}

function getCCW_49620(involute_49623) {
	var result_49625 = null;

	BeforeRet: do {
		var first_49633 = 0;
		var last_49642 = (involute_49623 != null ? (involute_49623.length-1) : -1);
		var involuteCCW_49689 = newSeq_49658((involute_49623 != null ? involute_49623.length : 0));
		L1: do {
			var i_49699 = 0;
			var res_49706 = first_49633;
			L2: do {
					L3: while (true) {
					if (!(res_49706 <= last_49642)) break L3;
						i_49699 = res_49706;
						involuteCCW_49689[i_49699].x = involute_49623[i_49699].x;
						involuteCCW_49689[i_49699].y = -(involute_49623[i_49699].y);
						res_49706 += 1;
					}
			} while(false);
		} while(false);
		result_49625 = nimCopy(null, involuteCCW_49689, NTI49643);
		break BeforeRet;
	} while (false);

	return result_49625;

}

function setElements_42116(t_42119, ax_42120, ay_42121, bx_42122, by_42123, tx_42124, ty_42125) {
		t_42119.ax = ax_42120;
		t_42119.ay = ay_42121;
		t_42119.bx = bx_42122;
		t_42119.by = by_42123;
		t_42119.tx = tx_42124;
		t_42119.ty = ty_42125;

	
}

function rotate_42197(rad_42199) {
	var result_42200 = [{ax: 0.0, ay: 0.0, bx: 0.0, by: 0.0, tx: 0.0, ty: 0.0}];

		var s_42201 = Math.sin(rad_42199);
		var c_42202 = Math.cos(rad_42199);
		setElements_42116(result_42200[0], c_42202, s_42201, -(s_42201), c_42202, 0.0, 0.0);

	return result_42200[0];

}

function ampeq__42959(p_42962, t_42963) {
		var newx_42964 = (((p_42962.x * t_42963.ax) + (p_42962.y * t_42963.bx)) + t_42963.tx);
		p_42962.y = (((p_42962.x * t_42963.ay) + (p_42962.y * t_42963.by)) + t_42963.ty);
		p_42962.x = newx_42964;

	
}

function rotate_49519(points_49523, points_49523_Idx, theta_49524) {
		var matrix_49525 = rotate_42197(theta_49524);
		L1: do {
			var i_49550 = 0;
			var colontmp__49554 = 0;
			colontmp__49554 = (points_49523[points_49523_Idx] != null ? (points_49523[points_49523_Idx].length-1) : -1);
			var res_49557 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_49557 <= colontmp__49554)) break L3;
						i_49550 = res_49557;
						ampeq__42959(points_49523[points_49523_Idx][i_49550], matrix_49525);
						res_49557 += 1;
					}
			} while(false);
		} while(false);

	
}

function getInvolutes_50562(gear_50564, dtheta_50565, direction_50566) {
		var Tmp1;

		var divrad_50568 = (6.2831853071795862e+000 / gear_50564.z);
		switch (direction_50566) {
		case 0:
			Tmp1 = 1.5707963267948966e+000;
			break;
		case 1:
			Tmp1 = 0.0;
			break;
		case 2:
			Tmp1 = -1.5707963267948966e+000;
			break;
		default: 
			Tmp1 = 3.1415926535897931e+000;
			break;
		}
		var thetaOffset_50572 = Tmp1;
		var theta_50573 = (Math.tan(gear_50564.alpha) - gear_50564.alpha);
		var involute_50575 = [getInvolute_49710(gear_50564, dtheta_50565)];
		var involuteCCW_50577 = [getCCW_49620(involute_50575[0])];
		rotate_49519(involute_50575, 0, (thetaOffset_50572 - theta_50573));
		rotate_49519(involuteCCW_50577, 0, ((divrad_50568 / 2.0000000000000000e+000) + (theta_50573 * 2.0000000000000000e+000)));
		rotate_49519(involuteCCW_50577, 0, (thetaOffset_50572 - theta_50573));
		gear_50564.involutes[0] = nimCopy(null, involute_50575[0], NTI50574);
		gear_50564.involutesCCW[0] = nimCopy(null, involuteCCW_50577[0], NTI50576);
		L2: do {
			var i_50590 = 0;
			var colontmp__50599 = 0;
			colontmp__50599 = gear_50564.z;
			var i_50602 = 1;
			L3: do {
					L4: while (true) {
					if (!(i_50602 < colontmp__50599)) break L4;
						i_50590 = i_50602;
						rotate_49519(involute_50575, 0, divrad_50568);
						rotate_49519(involuteCCW_50577, 0, divrad_50568);
						gear_50564.involutes[i_50590] = nimCopy(null, involute_50575[0], NTI50574);
						gear_50564.involutesCCW[i_50590] = nimCopy(null, involuteCCW_50577[0], NTI50576);
						i_50602 += 1;
					}
			} while(false);
		} while(false);

	
}

function init_51577(gears_51580, gears_51580_Idx, m_51581, z1_51582, z2_51583, alpha_51584, width_51585, height_51586, dtheta_51587) {
		gears_51580[gears_51580_Idx] = {gear1: null, gear2: null};
		gears_51580[gears_51580_Idx].gear1 = {m: 0.0, z: 0, alpha: 0.0, involutes: null, involutesCCW: null, centerx: 0.0, centery: 0.0};
		gears_51580[gears_51580_Idx].gear1.m = m_51581;
		gears_51580[gears_51580_Idx].gear1.z = z1_51582;
		gears_51580[gears_51580_Idx].gear1.alpha = alpha_51584;
		gears_51580[gears_51580_Idx].gear1.involutes = nimCopy(null, newSeq_51620(z1_51582), NTI51625);
		gears_51580[gears_51580_Idx].gear1.involutesCCW = nimCopy(null, newSeq_51620(z1_51582), NTI51625);
		gears_51580[gears_51580_Idx].gear1.centerx = (width_51585 / 2.0000000000000000e+000);
		gears_51580[gears_51580_Idx].gear1.centery = ((height_51586 - getd_49039(gears_51580[gears_51580_Idx].gear1)) / 2.0000000000000000e+000);
		getInvolutes_50562(gears_51580[gears_51580_Idx].gear1, dtheta_51587, 0);
		gears_51580[gears_51580_Idx].gear2 = {m: 0.0, z: 0, alpha: 0.0, involutes: null, involutesCCW: null, centerx: 0.0, centery: 0.0};
		gears_51580[gears_51580_Idx].gear2.m = m_51581;
		gears_51580[gears_51580_Idx].gear2.z = z2_51583;
		gears_51580[gears_51580_Idx].gear2.alpha = alpha_51584;
		gears_51580[gears_51580_Idx].gear2.involutes = nimCopy(null, newSeq_51620(z2_51583), NTI51625);
		gears_51580[gears_51580_Idx].gear2.involutesCCW = nimCopy(null, newSeq_51620(z2_51583), NTI51625);
		gears_51580[gears_51580_Idx].gear2.centerx = (width_51585 / 2.0000000000000000e+000);
		gears_51580[gears_51580_Idx].gear2.centery = ((height_51586 + getd_49039(gears_51580[gears_51580_Idx].gear2)) / 2.0000000000000000e+000);
		getInvolutes_50562(gears_51580[gears_51580_Idx].gear2, dtheta_51587, 2);

	
}

function radToDeg_43447(rad_43449) {
	var result_43450 = 0.0;

		result_43450 = (rad_43449 * 5.7295779513082323e+001);

	return result_43450;

}

function round_40707(x_40711, places_40713) {
	var result_40714 = 0.0;

		if ((places_40713 == 0)) {
		result_40714 = Math.round(x_40711);
		}
		else {
			var mult_40715 = Math.pow(1.0000000000000000e+001, places_40713);
			result_40714 = (Math.round((x_40711 * mult_40715)) / mult_40715);
		}
		

	return result_40714;

}

function getha_49055(gear_49057) {
	var result_49058 = 0.0;

	BeforeRet: do {
		result_49058 = gear_49057.m;
		break BeforeRet;
	} while (false);

	return result_49058;

}

function geth_49059(gear_49061) {
	var result_49062 = 0.0;

	BeforeRet: do {
		result_49062 = (2.2500000000000000e+000 * gear_49061.m);
		break BeforeRet;
	} while (false);

	return result_49062;

}

function showParameter_51501(gear_51503, name_51504) {
		document.getElementById(toJSStr((makeNimstrLit("m-").slice(0,-1)).concat(name_51504))).innerHTML = toJSStr(cstrToNimstr((gear_51503.m)+""));
		document.getElementById(toJSStr((makeNimstrLit("alpha-").slice(0,-1)).concat(name_51504))).innerHTML = toJSStr(cstrToNimstr((radToDeg_43447(gear_51503.alpha))+""));
		document.getElementById(toJSStr((makeNimstrLit("z-").slice(0,-1)).concat(name_51504))).innerHTML = toJSStr(cstrToNimstr((gear_51503.z)+""));
		document.getElementById(toJSStr((makeNimstrLit("d-").slice(0,-1)).concat(name_51504))).innerHTML = toJSStr(cstrToNimstr((round_40707(getd_49039(gear_51503), 2))+""));
		document.getElementById(toJSStr((makeNimstrLit("db-").slice(0,-1)).concat(name_51504))).innerHTML = toJSStr(cstrToNimstr((round_40707(getdb_49043(gear_51503), 2))+""));
		document.getElementById(toJSStr((makeNimstrLit("ha-").slice(0,-1)).concat(name_51504))).innerHTML = toJSStr(cstrToNimstr((round_40707(getha_49055(gear_51503), 2))+""));
		document.getElementById(toJSStr((makeNimstrLit("h-").slice(0,-1)).concat(name_51504))).innerHTML = toJSStr(cstrToNimstr((round_40707(geth_49059(gear_51503), 2))+""));
		document.getElementById(toJSStr((makeNimstrLit("da-").slice(0,-1)).concat(name_51504))).innerHTML = toJSStr(cstrToNimstr((round_40707(getda_49047(gear_51503), 2))+""));
		document.getElementById(toJSStr((makeNimstrLit("df-").slice(0,-1)).concat(name_51504))).innerHTML = toJSStr(cstrToNimstr((round_40707(getdf_49051(gear_51503), 2))+""));

	
}

function geta_49063(gears_49065) {
	var result_49066 = 0.0;

	BeforeRet: do {
		result_49066 = ((getd_49039(gears_49065.gear1) + getd_49039(gears_49065.gear2)) / 2.0000000000000000e+000);
		break BeforeRet;
	} while (false);

	return result_49066;

}

function showParameter_51553(gears_51555) {
		showParameter_51501(gears_51555.gear1, makeNimstrLit("gear1"));
		showParameter_51501(gears_51555.gear2, makeNimstrLit("gear2"));
		document.getElementById("a").innerHTML = toJSStr(cstrToNimstr((round_40707(geta_49063(gears_51555), 2))+""));

	
}

function resize_51739(canvas_51741, maxwidth_51742, gears_51743) {
		var Tmp1;

		if (((1.6000000000000001e+000 * maxwidth_51742) <= window.innerWidth)) {
		Tmp1 = Math.floor(((1.6000000000000001e+000 * maxwidth_51742) / 2.0000000000000000e+000));
		}
		else {
		if ((maxwidth_51742 <= window.innerWidth)) {
		Tmp1 = Math.floor(maxwidth_51742 / 2);
		}
		else {
		Tmp1 = window.innerWidth;
		}
		}
		var width_51744 = Tmp1;
		canvas_51741.width = width_51744;
		gears_51743.gear1.centerx = (width_51744 / 2.0000000000000000e+000);
		gears_51743.gear2.centerx = (width_51744 / 2.0000000000000000e+000);

	
}

function getContext2D_48513(c_48515) {
	var result_48516 = null;

		result_48516=c_48515.getContext('2d');

	return result_48516;

}

function fillStyleeq__48089(ctx_48091, color_48092) {
		ctx_48091.fillStyle=color_48092;

	
}

function cls_51495(ctx_51497, width_51498, height_51499, color_51500) {
		fillStyleeq__48089(ctx_51497, color_51500);
		ctx_51497.fillRect(0.0, 0.0, width_51498, height_51499);

	
}

function strokeStyleeq__48101(ctx_48103, color_48104) {
		ctx_48103.strokeStyle=color_48104;

	
}

function drawCenter_51009(ctx_51011, gear_51012, lineLength_51013, lineWidth_51014, color_51015) {
		var x_51016 = gear_51012.centerx;
		var y_51017 = gear_51012.centery;
		var offset_51018 = (lineLength_51013 / 2.0000000000000000e+000);
		strokeStyleeq__48101(ctx_51011, color_51015);
		ctx_51011.lineWidth = lineWidth_51014;
		ctx_51011.beginPath();
		ctx_51011.moveTo((x_51016 - offset_51018), y_51017);
		ctx_51011.lineTo((x_51016 + offset_51018), y_51017);
		ctx_51011.stroke();
		ctx_51011.beginPath();
		ctx_51011.moveTo(x_51016, (y_51017 - offset_51018));
		ctx_51011.lineTo(x_51016, (y_51017 + offset_51018));
		ctx_51011.stroke();

	
}

function drawPolygonalLine_50604(ctx_50606, points_50608, xoffset_50609, yoffset_50610, lineWidth_50611, color_50612) {
		strokeStyleeq__48101(ctx_50606, color_50612);
		ctx_50606.lineWidth = lineWidth_50611;
		ctx_50606.beginPath();
		ctx_50606.moveTo((points_50608[0].x + xoffset_50609), (points_50608[0].y + yoffset_50610));
		L1: do {
			var point_51002 = {x: 0.0, y: 0.0};
			var i_51006 = 0;
			var L_51008 = (points_50608 != null ? points_50608.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_51006 < L_51008)) break L3;
						nimCopy(point_51002, points_50608[i_51006], NTI42021);
						ctx_50606.lineTo((point_51002.x + xoffset_50609), (point_51002.y + yoffset_50610));
						i_51006 += 1;
					}
			} while(false);
		} while(false);
		ctx_50606.stroke();

	
}

function getTheta_49067(point_49069) {
	var result_49070 = 0.0;

	BeforeRet: do {
		var r_49443 = Math.sqrt((roof__49072(point_49069.x, 2) + roof__49072(point_49069.y, 2)));
		if ((0.0 <= point_49069.y)) {
		result_49070 = Math.acos((point_49069.x / r_49443));
		break BeforeRet;
		}
		else {
			result_49070 = (6.2831853071795862e+000 - Math.acos((point_49069.x / r_49443)));
			break BeforeRet;
		}
		
	} while (false);

	return result_49070;

}

function drawda_51022(ctx_51024, involute_51026, involuteCCW_51027, xoffset_51028, yoffset_51029, lineWidth_51030, color_51031) {
		var last_51209 = (involute_51026 != null ? (involute_51026.length-1) : -1);
		var theta0_51210 = getTheta_49067(involute_51026[last_51209]);
		var theta1_51211 = getTheta_49067(involuteCCW_51027[last_51209]);
		var ra_51228 = Math.sqrt((roof__49072(involute_51026[last_51209].x, 2) + roof__49072(involute_51026[last_51209].y, 2)));
		ctx_51024.beginPath();
		ctx_51024.arc(xoffset_51028, yoffset_51029, ra_51228, theta0_51210, theta1_51211, false);
		ctx_51024.stroke();

	
}

function drawdf_51233(ctx_51235, involute0_51237, involute1_51238, xoffset_51239, yoffset_51240, lineWidth_51241, color_51242) {
		var first_51408 = 0;
		var theta0_51409 = getTheta_49067(involute0_51237[first_51408]);
		var theta1_51410 = getTheta_49067(involute1_51238[first_51408]);
		var point_51411 = nimCopy(null, involute0_51237[first_51408], NTI42021);
		var rf_51428 = Math.sqrt((roof__49072(point_51411.x, 2) + roof__49072(point_51411.y, 2)));
		ctx_51235.beginPath();
		ctx_51235.arc(xoffset_51239, yoffset_51240, rf_51428, theta0_51409, theta1_51410, false);
		ctx_51235.stroke();

	
}

function drawGear_51434(ctx_51436, gear_51437, color_51438) {
		var first_51446 = 0;
		var last_51455 = (gear_51437.involutes != null ? (gear_51437.involutes.length-1) : -1);
		L1: do {
			var i_51465 = 0;
			var res_51481 = first_51446;
			L2: do {
					L3: while (true) {
					if (!(res_51481 <= last_51455)) break L3;
						i_51465 = res_51481;
						drawPolygonalLine_50604(ctx_51436, gear_51437.involutes[i_51465], gear_51437.centerx, gear_51437.centery, 1.0000000000000000e+000, color_51438);
						drawPolygonalLine_50604(ctx_51436, gear_51437.involutesCCW[i_51465], gear_51437.centerx, gear_51437.centery, 1.0000000000000000e+000, color_51438);
						drawda_51022(ctx_51436, gear_51437.involutes[i_51465], gear_51437.involutesCCW[i_51465], gear_51437.centerx, gear_51437.centery, 1.0000000000000000e+000, color_51438);
						res_51481 += 1;
					}
			} while(false);
		} while(false);
		L4: do {
			var i_51475 = 0;
			var i_51488 = first_51446;
			L5: do {
					L6: while (true) {
					if (!(i_51488 < last_51455)) break L6;
						i_51475 = i_51488;
						drawdf_51233(ctx_51436, gear_51437.involutesCCW[i_51475], gear_51437.involutes[(i_51475 + 1)], gear_51437.centerx, gear_51437.centery, 1.0000000000000000e+000, color_51438);
						i_51488 += 1;
					}
			} while(false);
		} while(false);
		drawdf_51233(ctx_51436, gear_51437.involutesCCW[last_51455], gear_51437.involutes[first_51446], gear_51437.centerx, gear_51437.centery, 1.0000000000000000e+000, color_51438);

	
}

function drawGears_51490(ctx_51492, gears_51493, color_51494) {
		drawGear_51434(ctx_51492, gears_51493.gear1, color_51494);
		drawGear_51434(ctx_51492, gears_51493.gear2, color_51494);

	
}

function rotate_49561(gear_49563, theta_49564) {
		L1: do {
			var i_49589 = 0;
			var colontmp__49593 = 0;
			colontmp__49593 = (gear_49563.involutes != null ? (gear_49563.involutes.length-1) : -1);
			var res_49596 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_49596 <= colontmp__49593)) break L3;
						i_49589 = res_49596;
						rotate_49519(gear_49563.involutes, i_49589, theta_49564);
						rotate_49519(gear_49563.involutesCCW, i_49589, theta_49564);
						res_49596 += 1;
					}
			} while(false);
		} while(false);

	
}

function rotate_49600(gears_49602, theta1_49603, rotation_49604) {
		var Tmp1;

		switch (rotation_49604) {
		case 0:
			Tmp1 = 1.0000000000000000e+000;
			break;
		default: 
			Tmp1 = -1.0000000000000000e+000;
			break;
		}
		var rot_49606 = Tmp1;
		var theta2_49607 = ((-(theta1_49603) * gears_49602.gear1.z) / gears_49602.gear2.z);
		rotate_49561(gears_49602.gear1, (rot_49606 * theta1_49603));
		rotate_49561(gears_49602.gear2, (rot_49606 * theta2_49607));

	
}

function loop_51564(canvas_51566, gears_51567) {
		var ctx_51571 = getContext2D_48513(canvas_51566);
		var width_51572 = canvas_51566.width;
		var height_51573 = canvas_51566.height;
		cls_51495(ctx_51571, width_51572, height_51573, canvas_51566.style.backgroundColor);
		drawCenter_51009(ctx_51571, gears_51567.gear1, 8.0000000000000000e+000, 1.0000000000000000e+000, "#FBFAF5");
		drawCenter_51009(ctx_51571, gears_51567.gear2, 8.0000000000000000e+000, 1.0000000000000000e+000, "#FBFAF5");
		drawGears_51490(ctx_51571, gears_51567, "#FBFAF5");
		rotate_49600(gears_51567, 3.4906585039886592e-003, 0);

	
}

function init_51746(maxwidth_51748, maxheight_51749, canvasid_51750, bgcolor_51751, ms_51752, m_51753, z1_51754, z2_51755, alpha_51756, dtheta_51757, zoom_51758, show_51759) {

		function colonanonymous__51766() {
				loop_51564(canvas_51762, gears_51763[0]);

			
		}

		function colonanonymous__51769(e_51771) {
				resize_51739(canvas_51762, maxwidth_51748, gears_51763[0]);

			
		}

		var width_51760 = nimMin(maxwidth_51748, window.innerWidth);
		var height_51761 = maxheight_51749;
		var canvas_51762 = document.getElementById(canvasid_51750);
		var gears_51763 = [null];
		init_51577(gears_51763, 0, (m_51753 * zoom_51758), z1_51754, z2_51755, alpha_51756, width_51760, height_51761, dtheta_51757);
		switch (show_51759) {
		case 0:
			showParameter_51553(gears_51763[0]);
			break;
		default: 
			break;
		}
		canvas_51762.width = width_51760;
		canvas_51762.height = height_51761;
		canvas_51762.style.backgroundColor = bgcolor_51751;
		resize_51739(canvas_51762, maxwidth_51748, gears_51763[0]);
		var timer_51768 = window.setInterval(colonanonymous__51766, ms_51752);
		window.addEventListener("resize", colonanonymous__51769, false);

	
}

function main_51777() {
		init_51746(600, 600, "involute", "#302833", 16, 4.0000000000000000e+000, 67, 47, 3.4906585039886590e-001, 1.7453292519943295e-002, 1.0000000000000000e+000, 0);
		init_51746(600, 600, "involute-zoom", "#302833", 16, 4.0000000000000000e+000, 67, 47, 3.4906585039886590e-001, 1.7453292519943295e-002, 5.0000000000000000e+000, 1);

	
}
if (true) {
main_51777();
}


function matrix2d_42040(ax_42042, ay_42043, bx_42044, by_42045, tx_42046, ty_42047) {
	var result_42134 = [{ax: 0.0, ay: 0.0, bx: 0.0, by: 0.0, tx: 0.0, ty: 0.0}];

		setElements_42116(result_42134[0], ax_42042, ay_42043, bx_42044, by_42045, tx_42046, ty_42047);

	return result_42134[0];

}

function point2d_42052(x_42054, y_42055) {
	var result_42918 = {x: 0.0, y: 0.0};

		result_42918.x = x_42054;
		result_42918.y = y_42055;

	return result_42918;

}

function vector2d_42048(x_42050, y_42051) {
	var result_42319 = {x: 0.0, y: 0.0};

		result_42319.x = x_42050;
		result_42319.y = y_42051;

	return result_42319;

}
